// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\2\0\1\6\1\7\1\10\1\0\1\11\1\12"+
    "\1\13\1\7\1\14\1\7\1\15\1\16\1\17\11\20"+
    "\1\0\1\21\1\22\1\23\1\22\2\0\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\30\1\35\1\36\2\30\1\37\1\30\1\40\1\41"+
    "\1\42\2\30\1\43\3\30\1\44\1\0\1\45\1\7"+
    "\1\30\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\2\30\1\57\1\60\1\61\1\62"+
    "\1\63\1\30\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\10\1\76\7\0\1\3"+
    "\73\0\1\30\7\0\1\30\3\0\1\30\3\0\1\30"+
    "\1\0\1\30\6\0\1\30\1\0\1\30\4\0\1\30"+
    "\7\0\1\30\3\0\1\30\3\0\1\30\1\0\1\30"+
    "\6\0\1\30\1\0\1\30\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\3\1\5"+
    "\1\6\1\7\1\1\1\4\2\10\1\11\1\12\1\13"+
    "\14\14\1\15\1\16\12\14\1\17\1\20\1\12\1\21"+
    "\1\22\1\0\1\23\1\0\1\2\1\0\2\24\34\14"+
    "\1\25\5\14\5\0\34\14\1\26\1\14\1\27\3\14"+
    "\3\0\1\2\16\14\1\30\1\31\10\14\1\32\5\14"+
    "\1\33\4\14\2\0\1\14\1\34\5\14\1\35\20\14"+
    "\1\36\3\14\1\37\1\14\1\40\2\0\26\14\1\41"+
    "\1\14\1\42\1\43\1\0\1\14\1\44\17\14\1\45"+
    "\1\46\2\14\1\47\1\14\1\0\1\14\1\50\5\14"+
    "\1\51\1\14\1\52\1\14\1\53\4\14\1\54\1\14"+
    "\1\55\1\56\4\14\1\57\1\60\1\61\7\14\1\62"+
    "\1\63\6\14\1\64\3\14\1\65\2\14\1\66\1\67"+
    "\3\14\1\70\6\14\1\71\2\14\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\275\0\374\0\u013b\0\77"+
    "\0\u017a\0\77\0\77\0\u01b9\0\u01f8\0\u0237\0\u0276\0\77"+
    "\0\275\0\275\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\77\0\77"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\77\0\77\0\77\0\u081f\0\77\0\u085e"+
    "\0\u01b9\0\u089d\0\u08dc\0\u01b9\0\u091b\0\u095a\0\u0999\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u0372\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u091b\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\u1959\0\u0372\0\u1998\0\u0372\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\u1b12\0\u1236\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u0372\0\u0372\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u0372\0\u20bb\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u0372\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u0372"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u0372\0\u2919\0\u2958\0\u2997\0\u0372\0\u29d6\0\u0372\0\u2a15"+
    "\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u0372"+
    "\0\u2ffd\0\u0372\0\77\0\u303c\0\u307b\0\u0372\0\u30ba\0\u30f9"+
    "\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1"+
    "\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u0372\0\u0372\0\u346b"+
    "\0\u34aa\0\u0372\0\u34e9\0\u3528\0\u3567\0\u0372\0\u35a6\0\u35e5"+
    "\0\u3624\0\u3663\0\u36a2\0\u0372\0\u36e1\0\u0372\0\u3720\0\u0372"+
    "\0\u375f\0\u379e\0\u37dd\0\u381c\0\u0372\0\u385b\0\u0372\0\u0372"+
    "\0\u389a\0\u38d9\0\u3918\0\u3957\0\u0372\0\u0372\0\u0372\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u0372\0\u0372"+
    "\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u0372\0\u3cc9"+
    "\0\u3d08\0\u3d47\0\u0372\0\u3d86\0\u3dc5\0\u0372\0\u0372\0\u3e04"+
    "\0\u3e43\0\u3e82\0\u0372\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u0372\0\u403b\0\u407a\0\u0372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\26\1\31\1\32\1\33\1\34\1\26\1\35"+
    "\1\36\1\26\1\37\1\40\1\26\1\41\1\42\1\43"+
    "\1\44\1\45\2\26\1\46\1\26\1\47\3\26\1\50"+
    "\1\26\1\51\2\26\1\52\3\26\1\53\1\54\101\0"+
    "\1\3\117\0\1\55\77\0\20\56\2\0\27\56\25\0"+
    "\1\57\72\0\2\60\75\0\2\61\71\0\1\62\2\0"+
    "\1\63\4\0\1\57\70\0\1\64\1\0\1\65\1\66"+
    "\73\0\1\64\1\0\2\17\75\0\2\26\3\0\20\26"+
    "\2\0\16\26\1\67\3\26\1\70\4\26\21\0\2\26"+
    "\3\0\20\26\2\0\1\71\26\26\21\0\2\26\3\0"+
    "\20\26\2\0\1\72\13\26\1\73\12\26\21\0\2\26"+
    "\3\0\20\26\2\0\27\26\21\0\2\26\3\0\20\26"+
    "\2\0\1\74\7\26\1\75\16\26\21\0\2\26\3\0"+
    "\20\26\2\0\16\26\1\76\10\26\21\0\2\26\3\0"+
    "\20\26\2\0\14\26\1\77\12\26\21\0\2\26\3\0"+
    "\20\26\2\0\10\26\1\100\3\26\1\101\12\26\21\0"+
    "\2\26\3\0\20\26\2\0\1\102\3\26\1\103\7\26"+
    "\1\104\12\26\21\0\2\26\3\0\20\26\2\0\10\26"+
    "\1\105\5\26\1\106\10\26\21\0\2\26\3\0\20\26"+
    "\2\0\2\26\1\107\1\26\1\110\13\26\1\111\6\26"+
    "\21\0\2\26\3\0\20\26\2\0\16\26\1\112\10\26"+
    "\21\0\2\26\3\0\20\26\2\0\10\26\1\113\3\26"+
    "\1\114\12\26\21\0\2\26\3\0\20\26\2\0\11\26"+
    "\1\115\2\26\1\116\12\26\21\0\2\26\3\0\20\26"+
    "\2\0\14\26\1\117\12\26\21\0\2\26\3\0\20\26"+
    "\2\0\11\26\1\120\15\26\21\0\2\26\3\0\20\26"+
    "\2\0\14\26\1\121\4\26\1\122\5\26\21\0\2\26"+
    "\3\0\20\26\2\0\5\26\1\123\5\26\1\124\13\26"+
    "\21\0\2\26\3\0\20\26\2\0\1\125\26\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\126\22\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\127\22\26\21\0"+
    "\2\26\3\0\20\26\2\0\7\26\1\130\17\26\21\0"+
    "\2\56\3\0\20\56\2\0\27\56\16\0\1\131\2\0"+
    "\2\132\56\0\13\133\1\134\63\133\2\63\1\3\1\63"+
    "\1\4\72\63\15\0\1\64\1\0\2\135\73\0\1\64"+
    "\1\0\2\66\75\0\2\26\3\0\20\26\2\0\4\26"+
    "\1\136\11\26\1\137\10\26\21\0\2\26\3\0\20\26"+
    "\2\0\4\26\1\140\22\26\21\0\2\26\3\0\20\26"+
    "\2\0\16\26\1\141\10\26\21\0\2\26\3\0\20\26"+
    "\2\0\11\26\1\142\15\26\21\0\2\26\3\0\20\26"+
    "\2\0\16\26\1\143\3\26\1\144\4\26\21\0\2\26"+
    "\3\0\20\26\2\0\11\26\1\145\15\26\21\0\2\26"+
    "\3\0\20\26\2\0\11\26\1\146\15\26\21\0\2\26"+
    "\3\0\20\26\2\0\14\26\1\147\12\26\21\0\2\26"+
    "\3\0\20\26\2\0\10\26\1\150\16\26\21\0\2\26"+
    "\3\0\20\26\2\0\13\26\1\151\13\26\21\0\2\26"+
    "\3\0\20\26\2\0\1\152\26\26\21\0\2\26\3\0"+
    "\20\26\2\0\10\26\1\153\16\26\21\0\2\26\3\0"+
    "\20\26\2\0\1\154\26\26\21\0\2\26\3\0\20\26"+
    "\2\0\3\26\1\155\23\26\21\0\2\26\3\0\20\26"+
    "\2\0\4\26\1\156\22\26\21\0\2\26\3\0\20\26"+
    "\2\0\10\26\1\157\16\26\21\0\2\26\3\0\20\26"+
    "\2\0\1\160\26\26\21\0\2\26\3\0\20\26\2\0"+
    "\20\26\1\161\6\26\21\0\2\26\3\0\20\26\2\0"+
    "\1\162\26\26\21\0\2\26\3\0\20\26\2\0\21\26"+
    "\1\163\5\26\21\0\2\26\3\0\20\26\2\0\6\26"+
    "\1\164\20\26\21\0\2\26\3\0\20\26\2\0\14\26"+
    "\1\165\12\26\21\0\2\26\3\0\20\26\2\0\4\26"+
    "\1\166\22\26\21\0\2\26\3\0\20\26\2\0\11\26"+
    "\1\167\15\26\21\0\2\26\3\0\17\26\1\170\2\0"+
    "\27\26\21\0\2\26\3\0\20\26\2\0\17\26\1\171"+
    "\7\26\21\0\2\26\3\0\20\26\2\0\16\26\1\172"+
    "\10\26\21\0\2\26\3\0\20\26\2\0\13\26\1\173"+
    "\13\26\21\0\2\26\3\0\20\26\2\0\20\26\1\174"+
    "\6\26\21\0\2\26\3\0\20\26\2\0\20\26\1\175"+
    "\6\26\21\0\2\26\3\0\20\26\2\0\1\165\17\26"+
    "\1\176\6\26\21\0\2\26\3\0\20\26\2\0\24\26"+
    "\1\124\2\26\21\0\2\26\3\0\20\26\2\0\10\26"+
    "\1\177\16\26\21\0\2\200\72\0\1\131\2\0\2\201"+
    "\56\0\13\133\1\202\76\133\1\202\2\133\1\203\60\133"+
    "\17\0\2\26\3\0\20\26\2\0\1\204\26\26\21\0"+
    "\2\26\3\0\20\26\2\0\1\205\26\26\21\0\2\26"+
    "\3\0\20\26\2\0\16\26\1\206\10\26\21\0\2\26"+
    "\3\0\2\26\1\207\15\26\2\0\27\26\21\0\2\26"+
    "\3\0\20\26\2\0\2\26\1\210\24\26\21\0\2\26"+
    "\3\0\20\26\2\0\16\26\1\211\10\26\21\0\2\26"+
    "\3\0\20\26\2\0\1\212\26\26\21\0\2\26\3\0"+
    "\20\26\2\0\17\26\1\213\7\26\21\0\2\26\3\0"+
    "\20\26\2\0\20\26\1\214\6\26\21\0\2\26\3\0"+
    "\20\26\2\0\21\26\1\215\5\26\21\0\2\26\3\0"+
    "\20\26\2\0\13\26\1\216\13\26\21\0\2\26\3\0"+
    "\20\26\2\0\4\26\1\217\22\26\21\0\2\26\3\0"+
    "\20\26\2\0\3\26\1\220\23\26\21\0\2\26\3\0"+
    "\20\26\2\0\13\26\1\221\13\26\21\0\2\26\3\0"+
    "\20\26\2\0\13\26\1\222\13\26\21\0\2\26\3\0"+
    "\20\26\2\0\4\26\1\223\22\26\21\0\2\26\3\0"+
    "\2\26\1\224\15\26\2\0\27\26\21\0\2\26\3\0"+
    "\20\26\2\0\13\26\1\225\13\26\21\0\2\26\3\0"+
    "\20\26\2\0\20\26\1\226\6\26\21\0\2\26\3\0"+
    "\1\227\4\26\1\230\1\231\7\26\1\232\1\26\2\0"+
    "\27\26\21\0\2\26\3\0\20\26\2\0\13\26\1\233"+
    "\13\26\21\0\2\26\3\0\20\26\2\0\4\26\1\234"+
    "\22\26\21\0\2\26\3\0\7\26\1\235\4\26\1\236"+
    "\3\26\2\0\27\26\21\0\2\26\3\0\20\26\2\0"+
    "\11\26\1\174\15\26\21\0\2\26\3\0\20\26\2\0"+
    "\1\237\26\26\21\0\2\26\3\0\20\26\2\0\14\26"+
    "\1\240\12\26\21\0\2\26\3\0\20\26\2\0\7\26"+
    "\1\241\17\26\21\0\2\26\3\0\20\26\2\0\4\26"+
    "\1\242\22\26\21\0\2\26\3\0\20\26\2\0\2\26"+
    "\1\243\24\26\21\0\2\26\3\0\20\26\2\0\2\26"+
    "\1\244\24\26\21\0\2\26\3\0\20\26\2\0\21\26"+
    "\1\245\5\26\21\0\2\26\3\0\20\26\2\0\11\26"+
    "\1\246\15\26\16\0\1\247\2\0\2\250\72\0\1\131"+
    "\62\0\13\133\1\202\2\133\1\3\60\133\17\0\2\26"+
    "\3\0\2\26\1\251\15\26\2\0\27\26\21\0\2\26"+
    "\3\0\20\26\2\0\25\26\1\252\1\26\21\0\2\26"+
    "\3\0\20\26\2\0\1\253\26\26\21\0\2\26\3\0"+
    "\20\26\2\0\7\26\1\254\17\26\21\0\2\26\3\0"+
    "\20\26\2\0\21\26\1\255\5\26\21\0\2\26\3\0"+
    "\20\26\2\0\4\26\1\256\22\26\21\0\2\26\3\0"+
    "\20\26\2\0\16\26\1\257\10\26\21\0\2\26\3\0"+
    "\20\26\2\0\4\26\1\260\22\26\21\0\2\26\3\0"+
    "\20\26\2\0\4\26\1\261\22\26\21\0\2\26\3\0"+
    "\20\26\2\0\15\26\1\262\11\26\21\0\2\26\3\0"+
    "\3\26\1\263\14\26\2\0\27\26\21\0\2\26\3\0"+
    "\2\26\1\264\15\26\2\0\27\26\21\0\2\26\3\0"+
    "\3\26\1\265\14\26\2\0\27\26\21\0\2\26\3\0"+
    "\13\26\1\266\4\26\2\0\27\26\21\0\2\26\3\0"+
    "\20\26\2\0\7\26\1\267\17\26\21\0\2\26\3\0"+
    "\20\26\2\0\20\26\1\270\6\26\21\0\2\26\3\0"+
    "\20\26\2\0\20\26\1\271\6\26\21\0\2\26\3\0"+
    "\20\26\2\0\24\26\1\272\2\26\21\0\2\26\3\0"+
    "\20\26\2\0\14\26\1\273\12\26\21\0\2\26\3\0"+
    "\20\26\2\0\16\26\1\274\10\26\21\0\2\26\3\0"+
    "\20\26\2\0\4\26\1\275\3\26\1\276\16\26\21\0"+
    "\2\26\3\0\20\26\2\0\3\26\1\277\23\26\21\0"+
    "\2\26\3\0\20\26\2\0\13\26\1\124\13\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\300\22\26\21\0"+
    "\2\26\3\0\20\26\2\0\16\26\1\301\10\26\21\0"+
    "\2\26\3\0\20\26\2\0\16\26\1\174\10\26\21\0"+
    "\2\26\3\0\20\26\2\0\10\26\1\302\16\26\21\0"+
    "\2\26\3\0\7\26\1\303\10\26\2\0\27\26\21\0"+
    "\2\26\3\0\20\26\2\0\20\26\1\304\6\26\21\0"+
    "\2\26\3\0\20\26\2\0\7\26\1\305\17\26\21\0"+
    "\2\26\3\0\20\26\2\0\16\26\1\306\10\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\307\22\26\21\0"+
    "\2\310\72\0\1\247\2\0\2\311\75\0\2\26\3\0"+
    "\20\26\2\0\7\26\1\312\17\26\21\0\2\26\3\0"+
    "\20\26\2\0\6\26\1\313\20\26\21\0\2\26\3\0"+
    "\20\26\2\0\1\314\26\26\21\0\2\26\3\0\20\26"+
    "\2\0\11\26\1\315\15\26\21\0\2\26\3\0\20\26"+
    "\2\0\11\26\1\316\15\26\21\0\2\26\3\0\20\26"+
    "\2\0\10\26\1\317\16\26\21\0\2\26\3\0\20\26"+
    "\2\0\16\26\1\320\10\26\21\0\2\26\3\0\3\26"+
    "\1\321\14\26\2\0\27\26\21\0\2\26\3\0\20\26"+
    "\2\0\1\322\26\26\21\0\2\26\3\0\20\26\2\0"+
    "\7\26\1\323\17\26\21\0\2\26\3\0\20\26\2\0"+
    "\1\324\26\26\21\0\2\26\3\0\20\26\2\0\11\26"+
    "\1\325\15\26\21\0\2\26\3\0\20\26\2\0\1\326"+
    "\26\26\21\0\2\26\3\0\2\26\1\327\15\26\2\0"+
    "\27\26\21\0\2\26\3\0\20\26\2\0\4\26\1\330"+
    "\22\26\21\0\2\26\3\0\20\26\2\0\4\26\1\331"+
    "\22\26\21\0\2\26\3\0\20\26\2\0\13\26\1\332"+
    "\13\26\21\0\2\26\3\0\20\26\2\0\10\26\1\333"+
    "\16\26\21\0\2\26\3\0\20\26\2\0\24\26\1\334"+
    "\2\26\21\0\2\26\3\0\20\26\2\0\20\26\1\335"+
    "\6\26\21\0\2\26\3\0\20\26\2\0\1\336\26\26"+
    "\21\0\2\26\3\0\20\26\2\0\1\165\26\26\21\0"+
    "\2\26\3\0\20\26\2\0\11\26\1\337\15\26\21\0"+
    "\2\26\3\0\20\26\2\0\5\26\1\340\21\26\21\0"+
    "\2\26\3\0\20\26\2\0\10\26\1\341\16\26\21\0"+
    "\2\26\3\0\20\26\2\0\13\26\1\342\13\26\14\0"+
    "\1\343\4\0\2\344\72\0\1\247\101\0\2\26\3\0"+
    "\20\26\2\0\1\345\26\26\21\0\2\26\3\0\20\26"+
    "\2\0\4\26\1\346\22\26\21\0\2\26\3\0\20\26"+
    "\2\0\16\26\1\347\10\26\21\0\2\26\3\0\20\26"+
    "\2\0\1\350\26\26\21\0\2\26\3\0\20\26\2\0"+
    "\1\351\26\26\21\0\2\26\3\0\20\26\2\0\1\352"+
    "\26\26\21\0\2\26\3\0\3\26\1\353\14\26\2\0"+
    "\27\26\21\0\2\26\3\0\20\26\2\0\1\354\26\26"+
    "\21\0\2\26\3\0\20\26\2\0\20\26\1\355\6\26"+
    "\21\0\2\26\3\0\20\26\2\0\1\356\26\26\21\0"+
    "\2\26\3\0\20\26\2\0\20\26\1\357\6\26\21\0"+
    "\2\26\3\0\20\26\2\0\1\360\26\26\21\0\2\26"+
    "\3\0\20\26\2\0\16\26\1\361\10\26\21\0\2\26"+
    "\3\0\20\26\2\0\14\26\1\362\12\26\21\0\2\26"+
    "\3\0\20\26\2\0\16\26\1\363\10\26\21\0\2\26"+
    "\3\0\20\26\2\0\17\26\1\364\7\26\21\0\2\26"+
    "\3\0\20\26\2\0\20\26\1\365\6\26\21\0\2\26"+
    "\3\0\20\26\2\0\3\26\1\366\23\26\21\0\2\26"+
    "\3\0\20\26\2\0\20\26\1\367\6\26\21\0\2\26"+
    "\3\0\20\26\2\0\11\26\1\370\15\26\21\0\2\26"+
    "\3\0\20\26\2\0\16\26\1\371\10\26\21\0\2\26"+
    "\3\0\20\26\2\0\4\26\1\372\22\26\21\0\2\26"+
    "\3\0\20\26\2\0\14\26\1\373\12\26\14\0\1\343"+
    "\4\0\2\374\75\0\2\26\3\0\20\26\2\0\16\26"+
    "\1\375\10\26\21\0\2\26\3\0\20\26\2\0\20\26"+
    "\1\376\6\26\21\0\2\26\3\0\20\26\2\0\20\26"+
    "\1\377\6\26\21\0\2\26\3\0\20\26\2\0\20\26"+
    "\1\u0100\6\26\21\0\2\26\3\0\20\26\2\0\13\26"+
    "\1\u0101\13\26\21\0\2\26\3\0\20\26\2\0\1\u0102"+
    "\26\26\21\0\2\26\3\0\20\26\2\0\20\26\1\u0103"+
    "\6\26\21\0\2\26\3\0\20\26\2\0\1\u0104\26\26"+
    "\21\0\2\26\3\0\20\26\2\0\16\26\1\u0105\10\26"+
    "\21\0\2\26\3\0\20\26\2\0\1\u0106\26\26\21\0"+
    "\2\26\3\0\20\26\2\0\13\26\1\u0107\13\26\21\0"+
    "\2\26\3\0\20\26\2\0\20\26\1\u0108\6\26\21\0"+
    "\2\26\3\0\20\26\2\0\13\26\1\u0109\13\26\21\0"+
    "\2\26\3\0\2\26\1\u010a\15\26\2\0\27\26\21\0"+
    "\2\26\3\0\11\26\1\u010b\6\26\2\0\27\26\21\0"+
    "\2\26\3\0\15\26\1\u010c\2\26\2\0\27\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\u010d\22\26\21\0"+
    "\2\26\3\0\3\26\1\u010e\14\26\2\0\27\26\21\0"+
    "\2\26\3\0\20\26\2\0\13\26\1\u010f\13\26\14\0"+
    "\1\343\103\0\2\26\3\0\20\26\2\0\20\26\1\u0110"+
    "\6\26\21\0\2\26\3\0\20\26\2\0\4\26\1\u0111"+
    "\22\26\21\0\2\26\3\0\20\26\2\0\10\26\1\u0112"+
    "\16\26\21\0\2\26\3\0\20\26\2\0\2\26\1\u0113"+
    "\24\26\21\0\2\26\3\0\20\26\2\0\20\26\1\u0114"+
    "\6\26\21\0\2\26\3\0\20\26\2\0\1\u0115\26\26"+
    "\21\0\2\26\3\0\20\26\2\0\20\26\1\u0116\6\26"+
    "\21\0\2\26\3\0\20\26\2\0\4\26\1\u0117\22\26"+
    "\21\0\2\26\3\0\20\26\2\0\17\26\1\u0118\7\26"+
    "\21\0\2\26\3\0\20\26\2\0\7\26\1\u0119\17\26"+
    "\21\0\2\26\3\0\20\26\2\0\1\u011a\26\26\21\0"+
    "\2\26\3\0\20\26\2\0\10\26\1\u011b\16\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\u011c\22\26\21\0"+
    "\2\26\3\0\15\26\1\u011d\2\26\2\0\27\26\21\0"+
    "\2\26\3\0\20\26\2\0\14\26\1\u011e\12\26\21\0"+
    "\2\26\3\0\20\26\2\0\4\26\1\u011f\22\26\21\0"+
    "\2\26\3\0\20\26\2\0\1\u0120\26\26\21\0\2\26"+
    "\3\0\20\26\2\0\14\26\1\u0121\12\26\21\0\2\26"+
    "\3\0\20\26\2\0\1\u0122\26\26\21\0\2\26\3\0"+
    "\20\26\2\0\1\26\1\u0123\25\26\21\0\2\26\3\0"+
    "\20\26\2\0\26\26\1\u0124\21\0\2\26\3\0\20\26"+
    "\2\0\22\26\1\u0125\4\26\21\0\2\26\3\0\20\26"+
    "\2\0\20\26\1\u0126\6\26\21\0\2\26\3\0\20\26"+
    "\2\0\13\26\1\u0127\13\26\21\0\2\26\3\0\20\26"+
    "\2\0\11\26\1\u0128\15\26\21\0\2\26\3\0\20\26"+
    "\2\0\16\26\1\u0129\10\26\21\0\2\26\3\0\20\26"+
    "\2\0\4\26\1\u012a\22\26\21\0\2\26\3\0\20\26"+
    "\2\0\4\26\1\u012b\22\26\21\0\2\26\3\0\20\26"+
    "\2\0\10\26\1\u012c\16\26\21\0\2\26\3\0\20\26"+
    "\2\0\1\u012d\26\26\21\0\2\26\3\0\20\26\2\0"+
    "\4\26\1\u012e\22\26\21\0\2\26\3\0\20\26\2\0"+
    "\20\26\1\u012f\6\26\21\0\2\26\3\0\20\26\2\0"+
    "\11\26\1\u0130\15\26\21\0\2\26\3\0\20\26\2\0"+
    "\1\u0131\26\26\21\0\2\26\3\0\20\26\2\0\20\26"+
    "\1\u0132\6\26\21\0\2\26\3\0\20\26\2\0\17\26"+
    "\1\u0133\7\26\21\0\2\26\3\0\20\26\2\0\20\26"+
    "\1\u0134\6\26\21\0\2\26\3\0\20\26\2\0\10\26"+
    "\1\u0135\16\26\21\0\2\26\3\0\20\26\2\0\10\26"+
    "\1\u0136\16\26\21\0\2\26\3\0\20\26\2\0\17\26"+
    "\1\u0137\7\26\21\0\2\26\3\0\20\26\2\0\14\26"+
    "\1\u0138\12\26\21\0\2\26\3\0\20\26\2\0\20\26"+
    "\1\u0139\6\26\21\0\2\26\3\0\20\26\2\0\13\26"+
    "\1\u013a\13\26\21\0\2\26\3\0\20\26\2\0\10\26"+
    "\1\u013b\16\26\21\0\2\26\3\0\20\26\2\0\2\26"+
    "\1\u013c\24\26\21\0\2\26\3\0\20\26\2\0\17\26"+
    "\1\u013d\7\26\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16569];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\2\11\4\1\1\11"+
    "\16\1\2\11\12\1\3\11\1\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\44\1\5\0\42\1\3\0\44\1"+
    "\2\0\37\1\2\0\31\1\1\11\1\0\27\1\1\0"+
    "\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 59: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 60: break;
          case 3:
            { return token(yytext(), "Operador_Logico", yyline, yycolumn);
            }
          // fall through
          case 61: break;
          case 4:
            { return token(yytext(), "Operador_Aritmetico", yyline, yycolumn);
            }
          // fall through
          case 62: break;
          case 5:
            { return token(yytext(), "Parentesis_A", yyline, yycolumn);
            }
          // fall through
          case 63: break;
          case 6:
            { return token(yytext(), "Parentesis_C", yyline, yycolumn);
            }
          // fall through
          case 64: break;
          case 7:
            { return token(yytext(), "Coma", yyline, yycolumn);
            }
          // fall through
          case 65: break;
          case 8:
            { return token(yytext(), "Numero", yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 9:
            { return token(yytext(), "Punto_Coma", yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 10:
            { return token(yytext(), "Operador_Relacional", yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 11:
            { return token(yytext(), "Operador_Asignacion", yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 12:
            { return token(yytext(), "Error_2", yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 13:
            { return token(yytext(), "Corchete_A", yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 14:
            { return token(yytext(), "Corchete_C", yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 15:
            { return token(yytext(), "Llave_A", yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 16:
            { return token(yytext(), "Llave_C", yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 17:
            { return token(yytext(), "Identificador", yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 18:
            { return token(yytext(), "Operador_Compuesto", yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 19:
            { return token(yytext(), "Numero_Decimal", yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 20:
            { return token(yytext(), "Error_1", yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 21:
            { return token(yytext(), "If", yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 22:
            { return token(yytext(), "For", yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 23:
            { return token(yytext(), "Tipo_Dato", yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 24:
            { return token(yytext(), "Media", yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 25:
            { return token(yytext(), "Moda", yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 26:
            { return token(yytext(), "Verdadero", yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 27:
            { return token(yytext(), "Else", yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 28:
            { return token(yytext(), "Arreglo", yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 29:
            { return token(yytext(), "Falso", yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 30:
            { return token(yytext(), "Clear", yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 31:
            { return token(yytext(), "Match", yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 32:
            { return token(yytext(), "while", yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 33:
            { return token(yytext(), "ElseIf", yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 34:
            { return token(yytext(), "Return", yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 35:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 36:
            { return token(yytext(), "Promedio", yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 37:
            { return token(yytext(), "Set_Grid", yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 38:
            { return token(yytext(), "Set_Text", yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 39:
            { return token(yytext(), "doWhile", yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 40:
            { return token(yytext(), "Grafica_Barras", yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 41:
            { return token(yytext(), "Ingreso_Datos", yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 42:
            { return token(yytext(), "Cargo_Datos", yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 43:
            { return token(yytext(), "Grafica_Circular", yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 44:
            { return token(yytext(), "Set_Title", yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 45:
            { return token(yytext(), "Function", yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 46:
            { return token(yytext(), "Grafica_Area", yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 47:
            { return token(yytext(), "Grupo_Datos", yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 48:
            { return token(yytext(), "Grafica_Lineas", yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 49:
            { return token(yytext(), "Main", yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 50:
            { return token(yytext(), "Covarianza", yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 51:
            { return token(yytext(), "Filtro_Datos", yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 52:
            { return token(yytext(), "Correlacion", yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 53:
            { return token(yytext(), "Set_FontS", yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 54:
            { return token(yytext(), "Print_Console", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 55:
            { return token(yytext(), "Grafica_Dispersion", yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 56:
            { return token(yytext(), "Set_ALabels", yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 57:
            { return token(yytext(), "Desviacion_Estandar", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 58:
            { return token(yytext(), "Calculo_Estadisticas", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
